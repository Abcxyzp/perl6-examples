# 08-path.t - SVG-Tiny-1.2 section 8 - Paths

use Test::Differences;
use SVG::Tiny;

plan 4;

my SVG::Tiny $image;
my Str       $expected;
my Str       $output;

# 8.2 path
# Path data in literal string
$image .= new( viewbox=>'0 0 100 100' );
$image.path( d=>'M 100 100 L 300 100 L 200 300 z', stroke=>'aqua' );
$expected = q[<?xml version="1.0"?>
<svg viewbox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny">
<path d="M 100 100 L 300 100 L 200 300 z" stroke="aqua" />
</svg>];
$output = $image.svg;
eq_or_diff( $output, $expected, "path with d stroke stroke-width" );

# Path data generated by nested function calls
$image .= new( viewbox=>'0 0 100 100' );
$image.path(
    d=>pathdata(
        moveto(x=>3,y=>4),
        lineto(x=>5,y=>6),
        closepath()
    ), stroke_width=>5, stroke=>'yellow'
);
$expected = q[<?xml version="1.0"?>
<svg viewbox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny">
<path d="M3,4 L5,6 z" stroke-width="5" stroke="yellow" />
</svg>];
$output = $image.svg;
eq_or_diff( $output, $expected, "one moveto and one lineto" );

# More path data tests do not have to generate a full SVG every time
# Cubic Bezier curves
$output = pathdata(
    moveto( x=>100, y=>200 ),
    curveto( x1=>100, y1=>100, x2=>250, y2=>100, x=>250, y=>200 ),
    smooth_curveto( x2=>400, y2=>300, x=>400, y=>200 )
); # the two semicircular lines from example 08_02.svg
$expected = "M100,200 C100,100 250,100 250,200 S400,300 400,200";
eq_or_diff( $output, $expected, "curveto and smooth_curveto" );

# Quadratic Bezier curves
$output = pathdata(
    moveto( x=>200, y=>300 ),
    quadratic_bezier_curveto( x1=>400, y1=>50, x=>600, y=>300 ),
    smooth_quadratic_bezier_curveto( x=>1000, y=>300 )
); # the parabolae from example 08_03.svg
$expected = "M200,300 Q400,50 600,300 T1000,300";
eq_or_diff( $output, $expected, "curveto and smooth_curveto" );

