#!/usr/local/bin/perl6
use Test::Harness;

my Str  $invalid;
my Bool $help    = Bool::False;
my Bool $recurse = Bool::False;
my Str  $perl    = 'perl6';    # unless overridden by --perl
my @files;
my @inc;
my Bool $taking_options = Bool::True;
for @*ARGS -> Str $arg {
    $taking_options = $taking_options && substr($arg,0,1) eq '-';
    if $taking_options {
        option($arg); }
    else {
        file_or_dir( $arg );
    }
}

if defined $invalid { say "invalid option: $invalid"; }
elsif $help         { help(); }
else                { Test::Harness::runtests( $perl, @files ) }
                    # passing $perl via %*ENV<HARNESS_PERL> would be better
                    # but doesn't work (yet)

sub option( Str $arg ) {
    given $arg {
        when '-h' | '--help'    { $help = Bool::True; }
        when '-I'               { say "include not implemented!"; }
        when '-r' | '--recurse' { $recurse = Bool::True; }
        when / '--perl='(.*) /  { $perl = ~ $0; }
        default                 { $invalid = $arg; }
    }
}

sub file_or_dir( Str $arg ) {
    if   is_file( $arg ) { push @files, $arg; }
    elsif is_dir( $arg ) {
        my Str $dirname = $arg;
	    if substr( $arg, -1, 1 ) eq '/' { # does directory name end with '/'?
	        $dirname = substr( $arg, 0, $arg.chars - 1); # remove the '/'
	    }
        my @tests = glob( "$dirname/*.t" );
        push @files, @tests;
        # my @tests_rakudo = glob( "$dirname/*.rakudo" ); # fudging
        # push @files, @tests_rakudo;                     # fudging
        if $recurse {
            my @names = glob( "$dirname/*" );
            for @names -> Str $name {
                if is_dir( $name ) {
                    file_or_dir( $name );
                }
            }
        }
    }
}

sub help() {
    say "usage: prove [options] [files/directories]";
    say "      --perl=/path/to/perl6  forces a perl6 version";
    say "  -r  --recurse              also test subdirectories";
    say "  -h  --help                 display this help";
}

# inefficient workaround - remove when Rakudo gets $name.:f or $name ~~ :f
# fixed by masak++ in r35338 but that revision dies as documented in BUGS
sub is_file( Str $name ) {
    my Str $result = Test::Harness::qx( "ls -ld $name 2>/dev/null" );
    return ( substr( $result, 0, 1 ) eq '-' );
}

# inefficient workaround - remove when Rakudo gets $name.:d or $name ~~ :d
sub is_dir( Str $name ) {
    my Str $result = Test::Harness::qx( "ls -ld $name 2>/dev/null" );
    return ( substr( $result, 0, 1 ) eq 'd' );
}

# inefficient workaround - remove when Rakudo gets a glob function
sub glob( Str $pattern ) {
    my Str $tempfile = "/tmp/prove.tmp";
    my Str $command = "ls -d $pattern >$tempfile 2>/dev/null";
    run $command;
    my @filenames = slurp($tempfile).split("\n");
    # $*ERR.say: "FILENAMES: {@filenames.perl}";
    # slurp may append an empty line that is not in the file
    if @filenames[@filenames.end] eq "" { pop @filenames; } # [*-1] in newer rakudo
    unlink $tempfile;
    return @filenames;
}

=begin pod

=head1 NAME
prove - thin wrapper around Test::Harness

=head1 SYNOPSIS
=begin code
prove [options] [files/directories]
prove --recurse t
=end code

=head1 OPTIONS

=head2 --recurse
processes all subdirectories and files

=head2 --help
shows the command format and options

=head1 DESCRIPTION
Runs a series of tests (usually named *.t in a t/ directory) and
displays the results.

=head1 TODO
Replace is_file() and is_dir() with :f and :d as added by masak++ in r35338.

=head1 BUGS
35309 good
35310 t/01-parser.t t/02-text.t and t/03-man.t began to die with
"compiler returned NULL ByteCode '../Pod/Parser.pir' - The opcode 'getattribute_p_ic_sc' (getattribute<3>) was not found. Check the type and
number of the arguments" during .pir precompile of to/text.pm

In a later revision (on or before r35338) another error began to occur:
'Cannot write to a filehandle not opened for write'
during parse_begin() in Pod/Parser.pm

 To test the Pod suite check out an older Parrot like this:
 make PARROT_REV=35300 testrev

=head1 SEE ALSO
Run C<perldoc prove> to see the Perl 5 L<doc:prove> documentation.
Perl 5 also has a L<doc:Test::Harness>.

=head1 AUTHOR
Martin Berends (mberends on CPAN github #perl6 and @flashmail.com).

=end pod

